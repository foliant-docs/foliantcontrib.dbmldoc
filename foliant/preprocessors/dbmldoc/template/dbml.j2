{# Template should be initialized with data environment variable:

  data = PyDBMLParseResults object
#}

# Tables

{% for table in data.tables %}
## {{ table.name }}

{{ table.note or table.comment or '' }}

column | properties | type | descr | fkey
------ | -------- | ---- | ----- | ----
{% for col in table -%}
{% if col.pk %}**{{ col.name }}**{% else %}{{ col.name }}{% endif %} |
    {%- if col.not_null %} `NOT NULL` {% endif %}
    {%- if col.unique %} `UNIQUE` {% endif %}
    {%- if col.autoinc %} `AUTOINCREMENT` {% endif %}
    {%- if col.pk %} `PRIMARY KEY` {% endif %} |
{%- if col.type.__class__.__name__ == 'EnumType' %} [{{ col.type.name }}](#{{ col.type.name.lower() }})
{%- else %} {{ col.type }}
{%- endif %} | {{ col.note or col.comment or '' }} | 
  {%- for ref in table.refs -%}
    {%- if ref.col == col %} [{{ ref.ref_table.name}}](#{{ref.ref_table.name.lower()}}).{{ref.ref_col.name}}{% endif -%}
  {%- endfor %} {# {%- for ref in table.refs -%} #}
{% endfor %} {# {% for col in table -%} #}
{% endfor %} {# {% for table in data.tables %} #}

```sql
{{ table.sql }}
```

{% if data.enums %}
# Types

{% for enum in data.enums %}

## {{ enum.name }}

option | descr
------ | -----
{% for item in enum -%}
{{ item }} | {{ item.note or item.comment or '' }}
{% endfor %} {# {% for item in enum -%} #}

{% endfor %} {# {% for enum in data.enums %} #}
{% endif %} {# {% if data.enums %} #}
